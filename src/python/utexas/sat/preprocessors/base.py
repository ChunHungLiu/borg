"""
@author: Bryan Silverthorn <bcs@cargo-cult.org>
"""

from abc         import (
    abstractmethod,
    abstractproperty,
    )
from cargo.log   import get_logger
from cargo.sugar import ABC
from cargo.flags import (
    Flag,
    Flags,
    )
from utexas.rowed import (
    Rowed,
    AbstractRowed,
    )

log          = get_logger(__name__)
module_flags = \
    Flags(
        "SAT Preprocessors Configuration",
        Flag(
            "--preprocessors-file",
            default = [],
            action  = "append",
            metavar = "FILE",
            help    = "read preprocessors from FILE [%default]",
            ),
        )

def get_named_preprocessors(paths = [], flags = {}):
    """
    Retrieve a list of named solvers.
    """

    flags = module_flags.merged(flags)

    def yield_preprocessors_from(raw_path):
        """
        (Recursively) yield configured preprocessors.
        """

        import json

        from os.path  import dirname
        from cargo.io import expandpath

        path = expandpath(raw_path)

        with open(path) as file:
            loaded = json.load(file)

        log.note("read named-preprocessors file: %s", path)

        for (name, attributes) in loaded.get("preprocessors", {}).items():
            if name == "sat/SatELite":
                from utexas.sat.preprocessors import SatELitePreprocessor

                yield (name, SatELitePreprocessor(attributes["command"], dirname(path)))
            else:
                raise RuntimeError("unknown preprocessor name \"%s\"" % name)

    # build the solvers dictionary
    from itertools import chain

    return dict(chain(*(yield_preprocessors_from(p) for p in chain(paths, flags.preprocessors_file))))

class SAT_Preprocessor(AbstractRowed):
    """
    Preprocess SAT instances.
    """

    @abstractmethod
    def preprocess(self, task, budget, output_path, random, environment):
        """
        Preprocess an instance.
        """

    @abstractmethod
    def extend(self, task, answer, environment):
        """
        Extend an answer to a preprocessed task back to its parent task.
        """

    @abstractmethod
    def make_task(self, seed, input_task, output_path, environment, row = None):
        """
        Construct an appropriate preprocessed task from its output directory.
        """

class PreprocessorResult(AbstractRowed):
    """
    The result of running a preprocessor.
    """

    @abstractproperty
    def preprocessor(self):
        """
        The preprocessor that generated this result.
        """

    @abstractproperty
    def seed(self):
        """
        The seed for the preprocessor run that generated this result.
        """

    @abstractproperty
    def input_task(self):
        """
        The task on which this result was obtained.
        """

    @abstractproperty
    def output_task(self):
        """
        The task generated by the preprocessor, if any.
        """

    @abstractproperty
    def budget(self):
        """
        The budget provided for obtaining this result.
        """

    @abstractproperty
    def cost(self):
        """
        The cost of obtaining this result.
        """

    @abstractproperty
    def answer(self):
        """
        The result of the integrated solver, if any.
        """

class PreprocessorRunResult(PreprocessorResult):
    """
    The result of running a concrete preprocessor binary.
    """

    @abstractproperty
    def run(self):
        """
        The details of the associated run.
        """

class BarePreprocessorResult(Rowed, PreprocessorResult):
    """
    A typical preprocessor result implementation.
    """

    def __init__(self, preprocessor, seed, input_task, output_task, budget, cost, answer):
        """
        Initialize.
        """

        Rowed.__init__(self)

        self._preprocessor = preprocessor
        self._seed         = seed
        self._input_task   = input_task
        self._output_task  = output_task
        self._budget       = budget
        self._cost         = cost
        self._answer       = answer

    @property
    def preprocessor(self):
        """
        The preprocessor that generated this result.
        """

        return self._preprocessor

    @property
    def seed(self):
        """
        The seed for the preprocessor run that generated this result.
        """

        return self._seed

    @property
    def input_task(self):
        """
        The task on which this result was obtained.
        """

        return self._input_task

    @property
    def output_task(self):
        """
        The task generated by the preprocessor, if any.
        """

        return self._output_task

    @property
    def budget(self):
        """
        The budget provided for obtaining this result.
        """

        return self._budget

    @property
    def cost(self):
        """
        The cost of obtaining this result.
        """

        return self._cost

    @property
    def answer(self):
        """
        The result of the integrated solver, if any.
        """

        return self._answer

class BarePreprocessorRunResult(BarePreprocessorResult, PreprocessorRunResult):
    """
    A typical preprocessor run result implementation.
    """

    def __init__(self, preprocessor, seed, input_task, output_task, answer, run):
        """
        Initialize.
        """

        BarePreprocessorResult.__init__(
            self,
            preprocessor,
            seed,
            input_task,
            output_task,
            run.limit,
            run.proc_elapsed,
            answer,
            )

        self._run = run

    def get_new_row(self, session, preprocessor_row = None):
        """
        Create or obtain an ORM row for this object.
        """

        from uuid        import uuid4
        from utexas.data import (
            SAT_AnswerRow,
            CPU_LimitedRunRow,
            PreprocessorRunRow,
            )

        if preprocessor_row is None:
            preprocessor_row = self.preprocessor.get_row(session)

        if self.answer is None:
            answer_row = None
        else:
            answer_row = \
                SAT_AnswerRow(
                    satisfiable = self.answer.satisfiable,
                    certificate = self.answer.certificate,
                    )

        output_task_row      = \
            self.output_task.get_row(
                session,
                preprocessor_row = preprocessor_row,
                )
        preprocessor_run_row = \
            PreprocessorRunRow(
                uuid         = uuid4(),
                preprocessor = preprocessor_row,
                input_task   = self.input_task.get_row(session),
                output_task  = output_task_row,
                run          = CPU_LimitedRunRow.from_run(self._run),
                answer       = answer_row,
                seed         = self.seed,
                budget       = self.budget,
                cost         = self.cost,
                )

        session.add(preprocessor_run_row)

        return preprocessor_run_row

    @property
    def run(self):
        """
        The details of the associated run.
        """

        return self._run

class WrappedPreprocessorResult(Rowed, PreprocessorResult):
    """
    The result of a wrapped preprocessor.
    """

    def __init__(self, preprocessor, inner_result):
        """
        Initialize.
        """

        Rowed.__init__(self)

        self._preprocessor = preprocessor
        self._inner        = inner_result

    def get_new_row(self, session, preprocessor_row = None):
        """
        Create or obtain an ORM row for this object.
        """

        if preprocessor_row is None:
            preprocessor_row = self._preprocessor.get_row(session)

        return self._inner.get_row(session, preprocessor_row = preprocessor_row)

    @property
    def preprocessor(self):
        """
        The preprocessor that generated this result.
        """

        return self._preprocessor

    @property
    def seed(self):
        """
        The preprocessor that generated this result.
        """

        return self._inner.seed

    @property
    def input_task(self):
        """
        The task on which this result was obtained.
        """

        return self._inner.input_task

    @property
    def output_task(self):
        """
        The task generated by the preprocessor, if any.
        """

        return self._inner.output_task

    @property
    def budget(self):
        """
        The budget provided for obtaining this result.
        """

        return self._inner.budget

    @property
    def cost(self):
        """
        The cost of obtaining this result.
        """

        return self._inner.cost

    @property
    def answer(self):
        """
        The result of the integrated solver, if any.
        """

        return self._inner.answer

class SAT_PreprocessorError(RuntimeError):
    """
    The preprocessor failed in an unexpected way.
    """

